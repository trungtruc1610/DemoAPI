<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="/Scripts/jquery.signalR-2.4.2.js"></script>
<script src="/signalr/hubs"></script>
<style>
    .chessboard {
        width: 850px;
        height: 850px;
        background-image: url('/Images/bancotuong.jpg');
        position:absolute;
    }

    .chessnode {
        position: absolute;
        width: 50px;
        height: 50px;
    }

    .chessimgnode {
        width: 50px;
        height: 50px;
    }
</style>



<div id="app">
    <div class="chessboard">
        
            <div v-for="item in chessNode" v-if="item !== null" :id="item.id" class="chessnode" v-bind:style="{ display: item.visible, top: item.top + 'px', left: item.left + 'px'}">
                <img :src="'/' + item.src" class="chessimgnode"  />
            </div>
        
    </div>
    {{ message }}
    total record: {{total}}
    <input v-on:click="getTotal" type="button" value="get total" />
    List Student
    <ul id="demo">
        <li v-for="item in students" v-if="item !== null">
            {{item.Id}} {{item.Name}}
        </li>
    </ul>

    class room
    name: <input v-model="classRoom" type="text" value="" />
    class room name: {{classRoom}}

    <input v-on:click="insertClassRoom" type="button" value="insert Class Room" />

    <div>
        <ul id="discussion"></ul>
    </div>
</div>
<script>
    var stObject = {};

    var app = new Vue({
        el: '#app',
        data: {
            message: 'Hello Vue! 112',
            total: 0,
            students: [],
            classRoom: '',
            chessNode: [],
            chessMatrix: [[]],
            indexStartI: -1,
            indexStartJ: -1,
            indexStopI : -1,
            indexStopJ: -1,
            originalX: 106,
            originalY: 61,
            squares: 74
        },
        methods: {
            getTotal() {
                axios
                    .get('/api/Student/getbyId?Id=1')
                    .then(response => {
                        this.total = response.data.total;
                        this.students = response.data.data;
                        console.log(this.students);
                    })
                    .catch(error => {
                        console.log(error)
                    })
                    .finally()
            },
            initMatrix() {
               
                for (var i = 0; i <= 9; i++) {
                    for (var j = 0; j <= 8; j++) {
                        this.$set(this.chessMatrix[i], j, this.initPoint(this.getXValue(j), this.getYValue(i), ""));
                    }
                }
               
            },
            initPrintMatrix() {
                for (var i = 0; i <= 9; i++) {
                    var strMatrix = "";
                    for (var j = 0; j <= 8; j++) {
                        strMatrix += '  ' + "(" + this.chessMatrix[i][j].top + ',' + this.chessMatrix[i][j].left + "-" + this.chessMatrix[i][j].id+ ")";
                    }
                    console.log();
                    console.log(strMatrix);
                }
            },
            initPoint(left, top, chessNodeId) {
                let temp = {};
                temp.top = top;
                temp.left = left;
                temp.id = chessNodeId;
                return temp;
            },
            getXValue(index) {
                return this.originalX + (index * this.squares);
            },
            getYValue(index) {
                return this.originalY + (index * this.squares);
            },
            hasChessNode(left, top, id) {
                this.indexStopI = -1;
                this.indexStopJ = -1;
                this.getIndex(left, top, "stop");
                var idPointStop = this.chessMatrix[this.indexStopI][this.indexStopJ ].id;
                if (idPointStop == "") {
                    return 0; /// khong co quan co nao tai vi tri nay
                }
                if (id.indexOf("do") >= 0) {
                    if (idPointStop.indexOf("do") >= 0) {
                        return 1; //quan cung loai do
                    }
                    else
                        return -1; //quan khac loai
                }
                if (id.indexOf("den") >= 0) {
                    if (idPointStop.indexOf("den") >= 0) {
                        return 1; //quan cung loai do
                    }
                    else
                        return -1; //quan khac loai
                }

            },
            setChessNodeToMatrix(chessNode) {
                this.indexStopI = -1;
                this.indexStopJ = -1;
                
                this.getIndex(chessNode.left, chessNode.top, "stop");
                if (this.indexStopI == -1 && this.indexStopI == -1) {
                    return;
                }
                this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", chessNode.id);
            },
            getIndex(left, top, typeofMove) {
                if (typeofMove == "stop") {
                    this.indexStopI = -1;
                    this.indexStopJ = -1;
                }
                if (typeofMove == "start") {
                    this.indexStartI = -1;
                    this.indexStartJ = -1;
                }
                for (var i = 0; i <= 9; i++) {
                    for (var j = 0; j <= 8; j++) {
                        if (Math.abs(this.chessMatrix[i][j].top - top) < 20 && Math.abs(this.chessMatrix[i][j].left - left) < 20) {
                            if (typeofMove == "stop") {
                                this.indexStopI = i;
                                this.indexStopJ = j;
                                return;
                            }
                            if (typeofMove == "start") {
                                this.indexStartI = i;
                                this.indexStartJ = j;
                                return;
                            }
                        }
                    }
                }
            },
            insertClassRoom() {
                var payload = { Name: this.classRoom };
                var res = axios.post('/api/ClassRoom/insertClassRoom', payload);
                console.log(res.data);
            },
            getchessNode() {
                var res = axios.post('/api/chess/getchessnode').then(response => {
                    this.chessNode = response.data.chessnode;
                    this.chessMatrix = response.data.matrix;
                    this.initMatrix();
                    for (var i = 0; i < this.chessNode.length; i++) {
                        this.setChessNodeToMatrix(this.chessNode[i]);
                    }
                    this.initPrintMatrix();
                    //this.chessRoom = response.data.data;
                   
                })
                    .catch(error => {
                        console.log(error)
                    })
                    .finally();
            },
            revert(left, top, id) {
                var node = $("#" + id);
                node.css({ 'top': top + 'px' });
                node.css({ 'left': left + 'px' });
            }
        },
        updated: function () {
            var originaltop = 0;
            var originalleft = 0;
            $(".chessnode").draggable({                
                start: function (event, ui) {
                    originaltop = ui.position.top;
                    originalleft = ui.position.left;
                },
                drag: function () {

                },
                stop: function (event, ui) {
                    console.log('x=' + ui.position.top + '  y=' + ui.position.left);
                    console.log(originaltop, originalleft);
                    if (Math.abs(ui.position.top - originaltop) >= 25) {

                        app.revert(originalleft, originaltop, this.id);
                    }
                    else {
                        if (Math.abs(ui.position.top - originaltop) / 2 > 30) {
                            var x = Math.abs(ui.position.top - originaltop) % 70;
                            //ui.position.top += Math.abs(ui.position.top - originaltop)%70;
                            app.revert(originalleft, ui.position.top - x, this.id);
                        }
                        else {
                            var x = Math.abs(ui.position.top - originaltop) % 70;
                            //ui.position.top -= Math.abs(ui.position.top - originaltop) % 70;
                            app.revert(originalleft, ui.position.top + x, this.id);
                        }
                    }
                    
                    //app.indexStopI = -1;
                    //app.indexStopJ = -1;
                    //app.getIndex(ui.position.left, ui.position.top, "stop");
                    //var movelist = [{ id: this.id, top: app.chessMatrix[app.indexStopI][app.indexStopJ].top, left: app.chessMatrix[app.indexStopI][app.indexStopJ].left, visible: true }];
                    //if (app.indexStopI != -1 && app.indexStopJ != -1) {
                        
                    //    app.getIndex(originalleft, originaltop, "start");
                    //    var flag = false;
                    //    if (this.id.indexOf("chutuongdo") >= 0) {
                    //        if (((Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) == 1) ||
                    //            (Math.abs(app.indexStopI - app.indexStartI) == 1 && Math.abs(app.indexStopJ - app.indexStartJ) == 0))
                    //            && (app.indexStopJ >= 3 && app.indexStopJ <= 5 && app.indexStopI >= 0 && app.indexStopI <= 2) &&
                    //            app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left, app.chessMatrix[app.indexStopI][app.indexStopJ].top, app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1) {
                    //            var node = $("#" + this.id);
                    //            node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                    //            node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                    //            app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                
                    //            flag = true;
                                
                    //        }
                    //    }
                    //    if (flag == true) {
                            
                    //        var res = axios.post('/api/chess/movenode', movelist).then(response => {
                    //            this.chessRoom = response.data.data;
                    //            //alert(response);

                    //        })
                    //        .catch(error => {
                    //            console.log(error)
                    //        })
                    //        .finally();
                    //    }
                    //    else
                    //        app.revert(originalleft, originaltop, this.id);
                    //}
                    //else {
                    //    try {
                    //        app.revert(originalleft, originaltop, this.id);
                    //    }
                    //    catch {}
                    //}
                    

                }
            });
        },
        mounted: function () {
            var chat = $.connection.requestlog;
            $.connection.hub.start().done(function () {

            });
            chat.client.postToClient = function (data) {
                //$('#discussion').append('Message' + data + '<br />');

                var result = [];
                result = JSON.parse(data);
                for (var i = 0; i < result.length; i++) {
                    var node = $("#" + result[i].id);
                    var startTop = parseInt(node.css('top'), 10);
                    var startLeft = parseInt(node.css('left'), 10);
                    node.css({ 'top': result[i].top + 'px' });
                    node.css({ 'left': result[i].left + 'px' });
                    node.css({ 'display': result[i].visible });
                    app.getIndex(startLeft, startTop, "start");
                    app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                    app.getIndex(result[i].left, result[i].top, "stop");
                    app.$set(app.chessMatrix[app.indexStopI][app.indexStopJ], "id", result[i].id);

                    app.initPrintMatrix();
                    //node.css({ 'top': result[i].top + 'px, left: ' + result[i].left + 'px, display:' + result[i].visible});
                    break;
                }
            };
            this.getchessNode();
        }
    })
</script>
